directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION

scalar DateTime

enum Role {
  ADMIN
  USER
}

input createUserInput {
  name: String
  email: String!
  role: String
  provider: String!
  socialId: String!
}

input loginUserInput {
  name: String
  socialId: String!
  provider: String!
  email: String!
}

input createGameInput {
  usersId: [Int!]!
}

type Mutation {
  add(x: Int!, y: Int!): Int!
  createUser(user: createUserInput!): User!
  createGame(game: createGameInput!): GameResult! @auth(requires: ADMIN)
  enterWord(word: String!, round: Int!, gameId: Int!): DifferenceBetweenWords @auth(requires: ADMIN)
}

type Query {
  dogs(word: String): String!
  user(id: Int!): User! @auth(requires: ADMIN)
  users: [User]! @auth(requires: ADMIN)
  login(input: loginUserInput!): GeneratedTokens!
  refresh(refreshToken: String!): GeneratedTokens!
}

type Subscription {
  enteredWord: CurrentRound
}

type Error {
  message: String!
}

type DifferenceBetweenWords {
  letter_1: LetterResultType
  letter_2: LetterResultType
  letter_3: LetterResultType
  letter_4: LetterResultType
  letter_5: LetterResultType
}

type CurrentRound {
  round: Int!
}

type GeneratedTokens {
  accessToken: String
  refreshToken: String!
}

type User {
  id: Int!
  name: String
  provider: String!
  socialId: String!
  email: String!
  role: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tokens {
  id: Int!
  userId: Int!
  refreshToken: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type Game {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User]
  word: String!
  guessed: [User]
  failed: [User]
  timeEnd: DateTime!
}

union GameResult = Game | Error

enum LetterResultType {
  CORRECT
  OTHER_PLACE
  INCORRECT
}
